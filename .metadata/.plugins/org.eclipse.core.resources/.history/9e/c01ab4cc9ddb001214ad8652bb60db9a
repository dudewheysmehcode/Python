'''
Created on Jun 15, 2013

@author: rmaharaj
@summary: This file contains math related functions.
'''
#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#
# Reuse Instructions
# Ensure that project references the Commons project
# add:
#     import lib.maths as maths
#   or
#     from lib import maths as maths
#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#--#

# imports
import math

def linear_regression(a):
    # x and y positions in array
    x = 1
    y = 2
    n = len(a)
    sumX = sum_array(a, x, n)
    sumY = sum_array(a, y, n)
    avgX = average_array(a, x, n)
    avgY = average_array(a, y, n) #average_array(list(a[i][y] for i in a))
    sumXY = sum_double_array(a, a, x, y, n)#sum_array(list(a[i][x]*a[i][y] for i in a))
    sumXX = sum_double_array(a, a, x, x, n)#sum_array(list(a[i][x]*2 for i in a))
    sumYY = sum_double_array(a, a, y, y, n)
    beta1 = calc_beta_sub_0(sumXY, sumXX, avgX, avgY, n)
    beta0 = calc_beta_sub_1(beta1, avgX, avgY)
    r = calc_correlation(n, sumXY, sumX, sumY, sumXX, sumYY)
    print "n:",n
    print "sumX:",sumX
    print "sumY:",sumY
    print "sumXY:",sumXY
    print "sumXX:",sumXX
    print "sumYY:",sumYY
    print "avgX:",avgX
    print "avgY:",avgY
    
    print "Beta1:", beta1, "; Beta0:", beta0
    print "corr:",r
    

def calc_beta_sub_0(sumXY, sumXX, avgX, avgY, n):
    numerator = sumXY - (n * avgX * avgY)
    denominator = sumXX - (n * avgX**2)
    return float(numerator / denominator)

def calc_beta_sub_1(beta1, avgX, avgY):
    return float(avgY - (beta1 * avgX))

def calc_correlation(n, sumXY, sumX, sumY, sumXX, sumYY):
    numerator = n * (sumXY - sumX) * sumY
    denominator = math.sqrt(((n*sumXX)-sumXX)*((n*sumYY)-sumYY))
    return float(numerator / denominator)

def calc_significance(r, n, alpha_over_two):
    # table A2 selected values. dof is first column
    # a/2 =       20 ,  40,   70,    80,    90,    95,     98,     99
    tdist = [[1,  .325, .727, 1.963, 3.078, 6.314, 12.706, 31.821, 63.657],
             [2,  .289, .617, 1.386, 1.886, 2.920, 4.303,  6.965,  99.25],
             [3,  .277, .584, 1.250, 1.638, 2.353, 3.182,  4.541,  5.841],
             [4,  .271, .569, 1.190, 1.533, 2.132, 2.776,  3.747,  4.604],
             [5,  .267, .559, 1.156, 1.476, 2.015, 2.571,  3.365,  4.032],
             [6,  .265, .553, 1.134, 1.440, 1.943, 2.447,  3.143,  3.707],
             [7,  .263, .549, 1.108, 1.397, 1.860, 2.306,  2.896,  3.355],
             [8,  .262, .546, 1.108, 1.397, 1.860, 2.306,  2.896,  3.355],
             [9,  .261, .543, 1.100, 1.383, 1.833, 2.262,  2.821,  3.250],
             [10, .260, .542, 1.093, 1.372, 1.812, 2.228,  2.764,  3.169],
             [15, .258, .536, 1.074, 1.341, 1.753, 2.131,  2.602,  2.947],
             [20, .257, .533, 1.064, 1.325, 1.725, 2.086,  2.528,  2.845],
             [30, .25,  .530, 1.055, 1.310, 1.697, 2.042,  2.457,  2.750],
             [99, .253, .524, 1.036, 1.282, 1.645, 1.960,  2.326,  2.576]]
    dof = n-2
    index = [0, 0]
    if dof == 0:
        print "Size of sample is too small: Degress of Freedom = 0"
    elif dof <= 10 and dof > 0:
        index[0] = dof - 1
    elif dof == 15:
        index[0] = 10
    elif dof == 20:
        index[0] = 11
    elif dof == 30:
        index[0] = 12
    else:
        index[0] = 13
        
    if alpha_over_two == 20:
        index[1] = 1
    elif alpha_over_two == 40:
        index[1] = 2
    elif alpha_over_two == 70:
        index[1] = 3
    elif alpha_over_two == 80:
        index[1] = 4
    elif alpha_over_two == 90:
        index[1] = 5
    elif alpha_over_two == 95:
        index[1] = 6
    elif alpha_over_two == 98:
        index[1] = 7
    elif alpha_over_two == 99:
        index[1] = 8
    else:
        print "Alpha/2 is not valid.  Using value of 99."
        index[1] = 8
        
    t = float((math.fabs(r)*(math.sqrt(n-2))) / math.sqrt(1-(r**2)))
    two_tailed_prob = 2*(1-(tdist[index[0]][index[1]]))
    return [t,two_tailed_prob]

def calc_variance(n, a, x, y, beta0, beta1):
    sum = 0
    for i in range(0, n):
        sum += float((a[i][y] - beta0 - (beta1*a[i][x]))**2)
    return sum * (1 / (n-2))

def calc_std_dev():
    pass

def calc_prediction_range():
    pass

def sum_array(a, value, n):
    result = 0.0
    for i in range(0, n):
        result += float(a[i][value])
    return result

def sum_double_array(a, b, value1, value2, n):
    result = 0.0
    for i in range(0, n):
        result += float(a[i][value1]) * float(b[i][value2])
    return result

def average_array(a, value, n):
    return float((sum_array(a, value, n)) / n)

def average_double_array(a, b, value1, value2, n):
    return float((sum_double_array(a, b, value1, value2, n)) / n)



#linear_regression([[1, 75, 80], [2, 63, 60]])
    